apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint
  labels:
    app: glusterfs-init
data:
  entrypoint.sh: |
    #!/usr/bin/env bash

    #set -euo pipefail
    set -x

    DEBIAN_FRONTEND=noninteractive
    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"

    echo "Installing dependencies"
    apt-get update
    apt-get install -y apt-transport-https curl gnupg lsb-release

    echo "Installing gcloud SDK"
    export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
    echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    apt-get update
    apt-get install -y google-cloud-sdk

    echo "Getting node metadata"
    NODE_NAME="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/name -H 'Metadata-Flavor: Google')"
    ZONE="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/zone -H 'Metadata-Flavor: Google' | awk -F  "/" '{print $4}')"

    echo "Setting up disks"
    DISK_NAME="$CLUSTER_NAME-${ZONE}-disk-1"

    if ! gcloud compute instances describe "$NODE_NAME" --zone "$ZONE" --format '(disks[].source)' | grep "$DISK_NAME" > /dev/null; then
        echo "Attaching $DISK_NAME to $NODE_NAME"
        gcloud compute instances attach-disk "$NODE_NAME" --disk "$DISK_NAME" --device-name=sdb --zone "$ZONE"
    else
        echo "$DISK_NAME is already attached to $NODE_NAME"
    fi

    # We use chroot to run the following commands in the host root (mounted as the /root volume in the container)
    echo "Installing glusterfs"
    chroot "${ROOT_MOUNT_DIR}" apt-get update
    chroot "${ROOT_MOUNT_DIR}" apt-get -y install software-properties-common
    chroot "${ROOT_MOUNT_DIR}" add-apt-repository -y ppa:gluster/glusterfs-5
    chroot "${ROOT_MOUNT_DIR}" apt-get update
    chroot "${ROOT_MOUNT_DIR}" apt-get -y install glusterfs-client
    chroot "${ROOT_MOUNT_DIR}" apt-mark hold glusterfs*

    echo "Loading Kernel modules"
    chroot "${ROOT_MOUNT_DIR}" echo "dm_snapshot" >> /etc/modules
    chroot "${ROOT_MOUNT_DIR}" modprobe dm_snapshot
    chroot "${ROOT_MOUNT_DIR}" echo "dm_mirror" >> /etc/modules 
    chroot "${ROOT_MOUNT_DIR}" modprobe dm_mirror
    chroot "${ROOT_MOUNT_DIR}" echo "dm_thin_pool" >> /etc/modules 
    chroot "${ROOT_MOUNT_DIR}" modprobe dm_thin_pool
    #chroot "${ROOT_MOUNT_DIR}" systemctl stop rpcbind.service
    #chroot "${ROOT_MOUNT_DIR}" systemctl disable rpcbind.service



